{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nfunction UploadImageComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" File size exceeds maximum limit of \", ctx_r0.maxFileSize, \" MB. \");\n  }\n}\nfunction UploadImageComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Invalid file extension. Allowed extensions: \", ctx_r1.allowedExtensions.join(\", \"), \". \");\n  }\n}\nfunction UploadImageComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"img\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const image_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", image_r4.url, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction UploadImageComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, UploadImageComponent_div_8_div_1_Template, 2, 1, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.uploadedUrls);\n  }\n}\nexport class UploadImageComponent {\n  constructor(http, formBuilder) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.fileInput = document.querySelector('#fileInput');\n    this.files = this.fileInput?.files;\n    this.maxFileSize = 1; // MB\n    this.allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n    this.fileSizeExceeded = false;\n    this.invalidExtension = false;\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', [Validators.required]]\n    });\n  }\n  onSubmit() {\n    const fileInput = document.querySelector('#fileInput');\n    const files = fileInput?.files;\n    if (files && files.length > 0) {\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (file) {\n          const formData = new FormData();\n          formData.append('file', file);\n          this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData).subscribe(result => {\n            console.log(result);\n          }, error => {\n            console.error(error);\n          });\n        } else {\n          console.log('No Selected Files');\n        }\n      }\n      // Reset the form after successful upload\n      this.uploadForm.reset();\n    }\n  }\n  validateFile() {\n    const fileInput = document.querySelector('#fileInput');\n    const files = fileInput?.files;\n    if (files && files.length > 0) {\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (file) {\n          const fileName = file.name;\n          const fileSize = file.size / 1024 / 1024; // Convert bytes to MB\n          const fileExtension = fileName.split('.').pop()?.toLowerCase();\n          if (fileSize > this.maxFileSize) {\n            this.fileSizeExceeded = true;\n          } else {\n            this.fileSizeExceeded = false;\n          }\n          if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension) === -1) {\n            this.invalidExtension = true;\n          } else {\n            this.invalidExtension = false;\n          }\n        } else {\n          this.fileSizeExceeded = false;\n          this.invalidExtension = false;\n        }\n      }\n    }\n  }\n}\nUploadImageComponent.ɵfac = function UploadImageComponent_Factory(t) {\n  return new (t || UploadImageComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nUploadImageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UploadImageComponent,\n  selectors: [[\"app-upload-image\"]],\n  decls: 9,\n  vars: 5,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"type\", \"file\", \"id\", \"fileInput\", \"formControlName\", \"fileInput\", \"multiple\", \"\", 1, \"form-control\", \"form-control-lg\", 2, \"width\", \"700px\", 3, \"change\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [4, \"ngIf\"], [1, \"alert\", \"alert-danger\"], [4, \"ngFor\", \"ngForOf\"], [3, \"src\"]],\n  template: function UploadImageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function UploadImageComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"input\", 2);\n      i0.ɵɵlistener(\"change\", function UploadImageComponent_Template_input_change_2_listener() {\n        return ctx.validateFile();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, UploadImageComponent_div_3_Template, 2, 1, \"div\", 3);\n      i0.ɵɵtemplate(4, UploadImageComponent_div_4_Template, 2, 1, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"br\");\n      i0.ɵɵelementStart(6, \"button\", 4);\n      i0.ɵɵtext(7, \"Upload\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(8, UploadImageComponent_div_8_Template, 2, 1, \"div\", 5);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.uploadForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.fileSizeExceeded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.invalidExtension);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.fileSizeExceeded || ctx.invalidExtension);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.uploadedUrls.length > 0);\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","UploadImageComponent","constructor","http","formBuilder","document","querySelector","fileInput","files","uploadForm","group","required","onSubmit","length","i","file","formData","FormData","append","post","subscribe","result","console","log","error","reset","validateFile","fileName","name","fileSize","size","fileExtension","split","pop","toLowerCase","maxFileSize","fileSizeExceeded","allowedExtensions","indexOf","invalidExtension","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-images\\upload-images.component.ts","D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-images\\upload-images.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-upload-image',\n  templateUrl: './upload-images.component.html',\n  styleUrls: []\n})\nexport class UploadImageComponent {\n  fileInput = document.querySelector('#fileInput') as HTMLInputElement;\n  files = this.fileInput?.files;\n  readonly maxFileSize = 1; // MB\n  readonly allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n  uploadForm: FormGroup;\n  fileSizeExceeded = false;\n  invalidExtension = false;\n\n  constructor(private http: HttpClient, private formBuilder: FormBuilder) {\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', [\n        Validators.required\n      ]]\n    });\n  }\n\n  onSubmit() {\n    const fileInput = document.querySelector('#fileInput') as HTMLInputElement;\n    const files = fileInput?.files;\n    if (files && files.length > 0) {\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (file) {\n          const formData = new FormData();\n          formData.append('file', file);\n          this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData)\n            .subscribe((result: any) => {\n              console.log(result);\n            }, (error: any) => {\n              console.error(error);\n            });\n        } else {\n          console.log('No Selected Files');\n        }\n      }\n      // Reset the form after successful upload\n      this.uploadForm.reset();\n    }\n  }\n\n  validateFile() {\n    const fileInput = document.querySelector('#fileInput') as HTMLInputElement;\n    const files = fileInput?.files;\n    if (files && files.length > 0) {\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (file) {\n          const fileName = file.name;\n          const fileSize = file.size / 1024 / 1024; // Convert bytes to MB\n          const fileExtension = fileName.split('.').pop()?.toLowerCase();\n\n          if (fileSize > this.maxFileSize) {\n            this.fileSizeExceeded = true;\n          } else {\n            this.fileSizeExceeded = false;\n          }\n\n          if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension) === -1) {\n            this.invalidExtension = true;\n          } else {\n            this.invalidExtension = false;\n          }\n        } else {\n          this.fileSizeExceeded = false;\n          this.invalidExtension = false;\n        }\n      }\n    }\n  }\n}\n","<form [formGroup]=\"uploadForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-group\">\n    <input class=\"form-control form-control-lg\" style=\"width: 700px;\" type=\"file\" id=\"fileInput\" formControlName=\"fileInput\" multiple (change)=\"validateFile()\">\n    <div *ngIf=\"fileSizeExceeded\" class=\"alert alert-danger\">\n      File size exceeds maximum limit of {{ maxFileSize }} MB.\n    </div>\n    \n    <div *ngIf=\"invalidExtension\" class=\"alert alert-danger\">\n  Invalid file extension. Allowed extensions: {{ allowedExtensions.join(', ') }}.\n    </div>\n  </div>\n  <br>\n  <button type=\"submit\" [disabled]=\" fileSizeExceeded || invalidExtension\" class=\"btn btn-primary\">Upload</button>\n</form>\n\n  \n  <div *ngIf=\"uploadedUrls.length > 0\" >\n    <div *ngFor=\"let image of uploadedUrls\">\n\n        <img  [src]=\"image.url\" />\n      </div>\n    </div>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}