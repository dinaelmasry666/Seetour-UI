{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet UploadImageComponent = class UploadImageComponent {\n  constructor(http, formBuilder) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.maxFileSize = 1; // MB\n    this.allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', Validators.compose([Validators.required, this.fileSizeValidator.bind(this), this.fileExtensionValidator.bind(this)])]\n    });\n  }\n  onSubmit() {\n    const formData = new FormData();\n    formData.append('file', this.uploadForm.get('fileInput')?.value);\n    this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData).subscribe(result => {\n      console.log(result);\n      // Reset the form after successful upload\n      this.uploadForm.reset();\n    }, error => {\n      console.error(error);\n    });\n  }\n  fileSizeValidator(control) {\n    const file = control.value;\n    if (file && file.size > 1024 * 1024 * this.maxFileSize) {\n      return {\n        fileSizeExceeded: true\n      };\n    }\n    return null;\n  }\n  fileExtensionValidator(control) {\n    const file = control.value;\n    const fileName = file?.name;\n    const fileExtension = fileName?.split('.').pop();\n    if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension.toLowerCase()) === -1) {\n      return {\n        invalidExtension: true\n      };\n    }\n    return null;\n  }\n};\nUploadImageComponent = __decorate([Component({\n  selector: 'app-upload-image',\n  templateUrl: './upload-image.component.html',\n  styleUrls: ['./upload-image.component.css']\n})], UploadImageComponent);\nexport { UploadImageComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAQ5D,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAK/BC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,SAAI,GAAJD,IAAI;IAAsB,gBAAW,GAAXC,WAAW;IAJzD,gBAAW,GAAW,CAAC,CAAC,CAAC;IACzB,sBAAiB,GAAa,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;IAIrE,IAAI,CAACC,UAAU,GAAG,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MACvCC,SAAS,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACQ,OAAO,CAAC,CAACR,UAAU,CAACS,QAAQ,EAAE,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAACC,sBAAsB,CAACD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KAErI,CAAC;EACJ;EAEAE,QAAQ;IACN,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACX,UAAU,CAACY,GAAG,CAAC,WAAW,CAAC,EAAEC,KAAK,CAAC;IAChE,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAC,uDAAuD,EAAEL,QAAQ,CAAC,CAC9EM,SAAS,CAAEC,MAAW,IAAI;MACzBC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;MACnB;MACA,IAAI,CAAChB,UAAU,CAACmB,KAAK,EAAE;IACzB,CAAC,EAAGC,KAAU,IAAI;MAChBH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CAAC;EACN;EAEQf,iBAAiB,CAACgB,OAAY;IACpC,MAAMC,IAAI,GAAGD,OAAO,CAACR,KAAK;IAC1B,IAAIS,IAAI,IAAIA,IAAI,CAACC,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,CAACC,WAAW,EAAE;MACtD,OAAO;QAAEC,gBAAgB,EAAE;MAAI,CAAE;;IAEnC,OAAO,IAAI;EACb;EAEQlB,sBAAsB,CAACc,OAAY;IACzC,MAAMC,IAAI,GAAGD,OAAO,CAACR,KAAK;IAC1B,MAAMa,QAAQ,GAAGJ,IAAI,EAAEK,IAAI;IAC3B,MAAMC,aAAa,GAAGF,QAAQ,EAAEG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,EAAE;IAChD,IAAIF,aAAa,IAAI,IAAI,CAACG,iBAAiB,CAACC,OAAO,CAAC,GAAG,GAAGJ,aAAa,CAACK,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;MAC7F,OAAO;QACLC,gBAAgB,EAAE;OACnB;;IAEH,OAAO,IAAI;EACb;CAED;AA7CYtC,oBAAoB,eALhCF,SAAS,CAAC;EACTyC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,GACWzC,oBAAoB,CA6ChC;SA7CYA,oBAAoB","names":["Component","Validators","UploadImageComponent","constructor","http","formBuilder","uploadForm","group","fileInput","compose","required","fileSizeValidator","bind","fileExtensionValidator","onSubmit","formData","FormData","append","get","value","post","subscribe","result","console","log","reset","error","control","file","size","maxFileSize","fileSizeExceeded","fileName","name","fileExtension","split","pop","allowedExtensions","indexOf","toLowerCase","invalidExtension","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-image\\upload-image.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-upload-image',\n  templateUrl: './upload-image.component.html',\n  styleUrls: ['./upload-image.component.css']\n})\nexport class UploadImageComponent {\n  maxFileSize: number = 1; // MB\n  allowedExtensions: string[] = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n  uploadForm: FormGroup;\n\n  constructor(private http: HttpClient, private formBuilder: FormBuilder) {\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', Validators.compose([Validators.required, this.fileSizeValidator.bind(this), this.fileExtensionValidator.bind(this)])]\n\n    });\n  }\n\n  onSubmit() {\n    const formData = new FormData();\n    formData.append('file', this.uploadForm.get('fileInput')?.value);\n    this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData)\n      .subscribe((result: any) => {\n        console.log(result);\n        // Reset the form after successful upload\n        this.uploadForm.reset();\n      }, (error: any) => {\n        console.error(error);\n      });\n  }\n\n  private fileSizeValidator(control: any) {\n    const file = control.value;\n    if (file && file.size > 1024 * 1024 * this.maxFileSize) {\n      return { fileSizeExceeded: true };\n    }\n    return null;\n  }\n\n  private fileExtensionValidator(control: any) {\n    const file = control.value;\n    const fileName = file?.name;\n    const fileExtension = fileName?.split('.').pop();\n    if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension.toLowerCase()) === -1) {\n      return {\n        invalidExtension: true\n      };\n    }\n    return null;\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}