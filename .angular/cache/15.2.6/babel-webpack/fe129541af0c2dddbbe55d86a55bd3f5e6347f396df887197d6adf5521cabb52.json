{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction UploadImageComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"File size exceeds maximum limit of \", ctx_r0.maxFileSize, \" MB.\");\n  }\n}\nfunction UploadImageComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtext(1, \"Please select a file to upload.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UploadImageComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Invalid file extension. Allowed extensions: \", ctx_r2.allowedExtensions.join(\", \"), \".\");\n  }\n}\nexport class UploadImageComponent {\n  constructor(http, formBuilder) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.maxFileSize = 1; // MB\n    this.allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', Validators.compose([Validators.required, this.fileSizeValidator(), this.fileExtensionValidator()])]\n    });\n  }\n  onSubmit() {\n    const formData = new FormData();\n    formData.append('file', this.uploadForm.get('fileInput')?.value);\n    this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData).subscribe(result => {\n      console.log(result);\n      // Reset the form after successful upload\n      this.uploadForm.reset();\n    }, error => {\n      console.error(error);\n    });\n  }\n  fileSizeValidator() {\n    return control => {\n      const file = control.value;\n      if (file && file.size > 1024 * 1024 * this.maxFileSize) {\n        console.log(\"hshasixe\");\n        return {\n          fileSizeExceeded: true\n        };\n      }\n      return null;\n    };\n  }\n  fileExtensionValidator() {\n    return control => {\n      const file = control.value;\n      const fileName = file?.name;\n      const fileExtension = fileName?.split('.').pop();\n      if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension.toLowerCase()) === -1) {\n        console.log(\"hsha\");\n        return {\n          invalidExtension: true\n        };\n      }\n      return null;\n    };\n  }\n}\nUploadImageComponent.ɵfac = function UploadImageComponent_Factory(t) {\n  return new (t || UploadImageComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nUploadImageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UploadImageComponent,\n  selectors: [[\"app-upload-image\"]],\n  decls: 8,\n  vars: 5,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"type\", \"file\", \"id\", \"fileInput\", \"formControlName\", \"fileInput\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"alert\", \"alert-danger\"]],\n  template: function UploadImageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function UploadImageComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelement(2, \"input\", 2);\n      i0.ɵɵtemplate(3, UploadImageComponent_div_3_Template, 2, 1, \"div\", 3);\n      i0.ɵɵtemplate(4, UploadImageComponent_div_4_Template, 2, 0, \"div\", 3);\n      i0.ɵɵtemplate(5, UploadImageComponent_div_5_Template, 2, 1, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 4);\n      i0.ɵɵtext(7, \"Upload\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.uploadForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", (ctx.uploadForm.controls[\"fileInput\"].errors == null ? null : ctx.uploadForm.controls[\"fileInput\"].errors[\"fileSizeExceeded\"]) && ctx.uploadForm.controls[\"fileInput\"].dirty);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.uploadForm.controls[\"fileInput\"].errors == null ? null : ctx.uploadForm.controls[\"fileInput\"].errors[\"required\"]) && ctx.uploadForm.controls[\"fileInput\"].touched);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.uploadForm.controls[\"fileInput\"].errors == null ? null : ctx.uploadForm.controls[\"fileInput\"].errors[\"invalidExtension\"]) && ctx.uploadForm.controls[\"fileInput\"].dirty);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.uploadForm.valid);\n    }\n  },\n  dependencies: [i3.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","UploadImageComponent","constructor","http","formBuilder","uploadForm","group","fileInput","compose","required","fileSizeValidator","fileExtensionValidator","onSubmit","formData","FormData","append","get","value","post","subscribe","result","console","log","reset","error","control","file","size","maxFileSize","fileSizeExceeded","fileName","name","fileExtension","split","pop","allowedExtensions","indexOf","toLowerCase","invalidExtension","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-image\\upload-image.component.ts","D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-image\\upload-image.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-upload-image',\n  templateUrl: './upload-image.component.html',\n  styleUrls: []\n})\nexport class UploadImageComponent {\n  maxFileSize: number = 1; // MB\n  allowedExtensions: string[] = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n  uploadForm: FormGroup;\n\n  constructor(private http: HttpClient, private formBuilder: FormBuilder) {\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', Validators.compose([\n        Validators.required,\n        this.fileSizeValidator(),\n        this.fileExtensionValidator()\n      ])]\n    });\n    \n  }\n\n  onSubmit() {\n    const formData = new FormData();\n    formData.append('file', this.uploadForm.get('fileInput')?.value);\n    this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData)\n      .subscribe((result: any) => {\n        console.log(result);\n        // Reset the form after successful upload\n        this.uploadForm.reset();\n      }, (error: any) => {\n        console.error(error);\n      });\n  }\n\n  public fileSizeValidator() {\n    return (control: any) => {\n      const file = control.value;\n      if (file && file.size > 1024 * 1024 * this.maxFileSize) {\n        console.log(\"hshasixe\");\n        return { fileSizeExceeded: true };\n      }\n      return null;\n    };\n  }\n  \n  public fileExtensionValidator() {\n    return (control: any) => {\n      const file = control.value;\n      const fileName = file?.name;\n      const fileExtension = fileName?.split('.').pop();\n      if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension.toLowerCase()) === -1) {\n        console.log(\"hsha\");\n        return {\n        \n          invalidExtension: true\n        };\n      }\n      return null;\n    };\n  }\n  \n}\n","<form [formGroup]=\"uploadForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-group\">\n    <input type=\"file\" id=\"fileInput\" formControlName=\"fileInput\">\n\n     <div *ngIf=\"uploadForm.controls['fileInput'].errors?.['fileSizeExceeded'] && uploadForm.controls['fileInput'].dirty\"\n          class=\"alert alert-danger\">File size exceeds maximum limit of {{ maxFileSize }} MB.</div>\n     <div *ngIf=\"uploadForm.controls['fileInput'].errors?.['required'] && uploadForm.controls['fileInput'].touched\"\n   class=\"alert alert-danger\">Please select a file to upload.</div>\n \n     <div *ngIf=\"uploadForm.controls['fileInput'].errors?.['invalidExtension'] && uploadForm.controls['fileInput'].dirty\"\n          class=\"alert alert-danger\">Invalid file extension. Allowed extensions: {{ allowedExtensions.join(', ') }}.</div>\n   </div>\n  <button type=\"submit\" [disabled]=\"!uploadForm.valid\" class=\"btn btn-primary\">Upload</button>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}