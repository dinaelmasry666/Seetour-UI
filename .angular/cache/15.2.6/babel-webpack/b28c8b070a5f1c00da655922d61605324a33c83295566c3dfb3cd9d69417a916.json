{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet UploadImageComponent = class UploadImageComponent {\n  constructor(http, formBuilder) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.fileInput = document.querySelector('#fileInput');\n    this.files = this.fileInput?.files;\n    this.maxFileSize = 1; // MB\n    this.allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n    this.fileSizeExceeded = false;\n    this.invalidExtension = false;\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', [Validators.required]]\n    });\n  }\n  onSubmit() {\n    const fileInput = document.querySelector('#fileInput');\n    const files = fileInput?.files;\n    if (files && files.length > 0) {\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (file) {\n          const formData = new FormData();\n          formData.append('file', file);\n          this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData).subscribe(result => {\n            console.log(result);\n          }, error => {\n            console.error(error);\n          });\n        } else {\n          console.log('No Selected Files');\n        }\n      }\n      // Reset the form after successful upload\n      this.uploadForm.reset();\n    }\n  }\n  validateFile() {\n    const fileInput = document.querySelector('#fileInput');\n    const files = fileInput?.files;\n    if (files && files.length > 0) {\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (file) {\n          const fileName = file.name;\n          const fileSize = file.size / 1024 / 1024; // Convert bytes to MB\n          const fileExtension = fileName.split('.').pop()?.toLowerCase();\n          if (fileSize > this.maxFileSize) {\n            this.fileSizeExceeded = true;\n          } else {\n            this.fileSizeExceeded = false;\n          }\n          if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension) === -1) {\n            this.invalidExtension = true;\n          } else {\n            this.invalidExtension = false;\n          }\n        } else {\n          this.fileSizeExceeded = false;\n          this.invalidExtension = false;\n        }\n      }\n    }\n  }\n};\nUploadImageComponent = __decorate([Component({\n  selector: 'app-upload-image',\n  templateUrl: './upload-image.component.html',\n  styleUrls: []\n})], UploadImageComponent);\nexport { UploadImageComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","UploadImageComponent","constructor","http","formBuilder","document","querySelector","fileInput","files","uploadForm","group","required","onSubmit","length","i","file","formData","FormData","append","post","subscribe","result","console","log","error","reset","validateFile","fileName","name","fileSize","size","fileExtension","split","pop","toLowerCase","maxFileSize","fileSizeExceeded","allowedExtensions","indexOf","invalidExtension","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-images\\upload-images.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-upload-image',\n  templateUrl: './upload-image.component.html',\n  styleUrls: []\n})\nexport class UploadImageComponent {\n  fileInput = document.querySelector('#fileInput') as HTMLInputElement;\n  files = this.fileInput?.files;\n  readonly maxFileSize = 1; // MB\n  readonly allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n  uploadForm: FormGroup;\n  fileSizeExceeded = false;\n  invalidExtension = false;\n\n  constructor(private http: HttpClient, private formBuilder: FormBuilder) {\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', [\n        Validators.required\n      ]]\n    });\n  }\n\n  onSubmit() {\n    const fileInput = document.querySelector('#fileInput') as HTMLInputElement;\n    const files = fileInput?.files;\n    if (files && files.length > 0) {\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (file) {\n          const formData = new FormData();\n          formData.append('file', file);\n          this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData)\n            .subscribe((result: any) => {\n              console.log(result);\n            }, (error: any) => {\n              console.error(error);\n            });\n        } else {\n          console.log('No Selected Files');\n        }\n      }\n      // Reset the form after successful upload\n      this.uploadForm.reset();\n    }\n  }\n\n  validateFile() {\n    const fileInput = document.querySelector('#fileInput') as HTMLInputElement;\n    const files = fileInput?.files;\n    if (files && files.length > 0) {\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        if (file) {\n          const fileName = file.name;\n          const fileSize = file.size / 1024 / 1024; // Convert bytes to MB\n          const fileExtension = fileName.split('.').pop()?.toLowerCase();\n\n          if (fileSize > this.maxFileSize) {\n            this.fileSizeExceeded = true;\n          } else {\n            this.fileSizeExceeded = false;\n          }\n\n          if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension) === -1) {\n            this.invalidExtension = true;\n          } else {\n            this.invalidExtension = false;\n          }\n        } else {\n          this.fileSizeExceeded = false;\n          this.invalidExtension = false;\n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}