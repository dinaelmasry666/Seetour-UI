{"ast":null,"code":"// upload-image.component.ts\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet UploadImageComponent = class UploadImageComponent {\n  constructor(http, formBuilder) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.fileInput = document.querySelector('#fileInput');\n    this.files = this.fileInput?.files;\n    this.maxFileSize = 1; // MB\n    this.allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n    this.fileSizeExceeded = false;\n    this.invalidExtensions = false;\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', [Validators.required]]\n    });\n  }\n  onSubmit() {\n    const fileInput = document.querySelector('#fileInput');\n    const files = fileInput?.files;\n    if (!files) {\n      console.log('No Selected Files');\n      return;\n    }\n    const formData = new FormData();\n    for (let i = 0; i < files.length; i++) {\n      const file = files.item(i);\n      formData.append('files[]', file, file?.name);\n    }\n    this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImages', formData).subscribe(result => {\n      console.log(result);\n      // Reset the form after successful upload\n      this.uploadForm.reset();\n    }, error => {\n      console.error(error);\n      // Display user-friendly error message here\n    });\n  }\n\n  fileSizeValidator() {\n    return control => {\n      const files = control.value;\n      if (files && files.length > 0) {\n        for (let i = 0; i < files.length; i++) {\n          const file = files[i];\n          if (file && file.size > this.maxFileSize * 1024 * 1024) {\n            this.fileSizeExceeded = true;\n            return {\n              'fileSizeExceeded': true\n            };\n          }\n        }\n      }\n      this.fileSizeExceeded = false;\n      return null;\n    };\n  }\n  fileExtensionValidator(allowedExtensions) {\n    return control => {\n      const files = control.value;\n      if (!files) {\n        return null;\n      }\n      for (const file of files) {\n        const fileName = file.name;\n        const fileExtension = fileName.split('.').pop()?.toLowerCase();\n        if (fileExtension && allowedExtensions.indexOf('.' + fileExtension) === -1) {\n          return {\n            invalidExtension: true\n          };\n        }\n      }\n      return null;\n    };\n  }\n  validateFiles() {\n    const fileInput = document.querySelector('#fileInput');\n    const files = fileInput?.files;\n    if (!files) {\n      return;\n    }\n    for (let i = 0; i < files.length; i++) {\n      const file = files.item(i);\n      const fileName = file?.name;\n      const fileSize = file?.size / 1024 / 1024; // Convert bytes to MB\n      const fileExtension = fileName?.split('.').pop()?.toLowerCase();\n      if (fileSize > this.maxFileSize) {\n        this.fileSizeExceeded = true;\n        return;\n      }\n      if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension) === -1) {\n        this.invalidExtension = true;\n        return;\n      }\n    }\n    this.fileSizeExceeded = false;\n    this.invalidExtension = false;\n  }\n};\nUploadImageComponent = __decorate([Component({\n  selector: 'app-upload-images',\n  templateUrl: './upload-image.component.html',\n  styleUrls: []\n})], UploadImageComponent);\nexport { UploadImageComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","UploadImageComponent","constructor","http","formBuilder","document","querySelector","fileInput","files","uploadForm","group","required","onSubmit","console","log","formData","FormData","i","length","file","item","append","name","post","subscribe","result","reset","error","fileSizeValidator","control","value","size","maxFileSize","fileSizeExceeded","fileExtensionValidator","allowedExtensions","fileName","fileExtension","split","pop","toLowerCase","indexOf","invalidExtension","validateFiles","fileSize","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-images\\upload-images.component.ts"],"sourcesContent":["// upload-image.component.ts\n\nimport { Component } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-upload-images',\n  templateUrl: './upload-image.component.html',\n  styleUrls: []\n})\nexport class UploadImageComponent {\n  fileInput = document.querySelector('#fileInput') as HTMLInputElement;\n  files = this.fileInput?.files;\n  readonly maxFileSize = 1; // MB\n  readonly allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n  uploadForm: FormGroup;\n  fileSizeExceeded = false;\n  invalidExtensions = false;\n\n  constructor(private http: HttpClient, private formBuilder: FormBuilder) {\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', [\n        Validators.required\n      ]]\n    });\n  }\n\n  onSubmit() {\n    const fileInput = document.querySelector('#fileInput') as HTMLInputElement;\n    const files = fileInput?.files as FileList;\n    if (!files) {\n      console.log('No Selected Files');\n      return;\n    }\n  \n    const formData = new FormData();\n    for (let i = 0; i < files.length; i++) {\n      const file = files.item(i);\n      formData.append('files[]', file as Blob, file?.name);\n    }\n  \n    this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImages', formData)\n      .subscribe((result: any) => {\n        console.log(result);\n        // Reset the form after successful upload\n        this.uploadForm.reset();\n      }, (error: any) => {\n        console.error(error);\n        // Display user-friendly error message here\n      });\n  }\n\n  private fileSizeValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: boolean } | null => {\n      const files = control.value;\n      if (files && files.length > 0) {\n        for (let i = 0; i < files.length; i++) {\n          const file = files[i];\n          if (file && file.size > this.maxFileSize * 1024 * 1024) {\n            this.fileSizeExceeded = true;\n            return { 'fileSizeExceeded': true };\n          }\n        }\n      }\n      this.fileSizeExceeded = false;\n      return null;\n    };\n  }\n\n  private fileExtensionValidator(allowedExtensions: string[]): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const files = control.value as File[];\n      if (!files) {\n        return null;\n      }\n      for (const file of files) {\n        const fileName = file.name;\n        const fileExtension = fileName.split('.').pop()?.toLowerCase();\n        if (fileExtension && allowedExtensions.indexOf('.' + fileExtension) === -1) {\n          return { invalidExtension: true };\n        }\n      }\n      return null;\n    }\n  }\n  \n  validateFiles() {\n    const fileInput = document.querySelector('#fileInput') as HTMLInputElement;\n    const files = fileInput?.files as FileList;\n    if (!files) {\n      return;\n    }\n    for (let i = 0; i < files.length; i++) {\n      const file = files.item(i);\n      const fileName = file?.name;\n      const fileSize = file?.size / 1024 / 1024; // Convert bytes to MB\n      const fileExtension = fileName?.split('.').pop()?.toLowerCase();\n  \n      if (fileSize > this.maxFileSize) {\n        this.fileSizeExceeded = true;\n        return;\n      }\n  \n      if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension) === -1) {\n        this.invalidExtension = true;\n        return;\n      }\n    }\n    this.fileSizeExceeded = false;\n    this.invalidExtension = false;\n  }\n  \n\n}\n\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}