{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction UploadImageComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtext(1, \"Please select a file to upload. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UploadImageComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"File size exceeds maximum limit of \", ctx_r1.maxFileSize, \" MB. \");\n  }\n}\nfunction UploadImageComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Invalid file extension. Allowed extensions: \", ctx_r2.allowedExtensions.join(\", \"), \". \");\n  }\n}\nexport class UploadImageComponent {\n  constructor(http, formBuilder) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.maxFileSize = 1; // MB\n    this.allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', [Validators.required, this.fileSizeValidator(), this.fileExtensionValidator(this.allowedExtensions)]]\n    });\n  }\n  onSubmit() {\n    const fileInput = document.querySelector('#fileInput');\n    console.log(fileInput);\n    console.log(fileInput.files);\n    const file = fileInput?.files?.[0];\n    if (file) {\n      const formData = new FormData();\n      formData.append('file', file);\n      this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData).subscribe(result => {\n        console.log(result);\n        // Reset the form after successful upload\n        this.uploadForm.reset();\n      }, error => {\n        console.error(error);\n        // Display user-friendly error message here\n      });\n    } else {\n      console.log('No Selected Files');\n    }\n  }\n  fileSizeValidator() {\n    console.log(\"valid\");\n    return control => {\n      const file = control.value;\n      if (file && file.size > 240000000000 * 1024 * this.maxFileSize) {\n        return {\n          'fileSizeExceeded': true\n        };\n      }\n      return null;\n    };\n  }\n  fileExtensionValidator(allowedExtensions) {\n    return control => {\n      const file = control.value;\n      const fileName = file?.name;\n      const fileExtension = fileName?.split('.').pop();\n      if (fileExtension && allowedExtensions.indexOf('.' + fileExtension.toLowerCase()) === -1) {\n        return {\n          invalidExtension: true\n        };\n      }\n      return null;\n    };\n  }\n}\nUploadImageComponent.ɵfac = function UploadImageComponent_Factory(t) {\n  return new (t || UploadImageComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nUploadImageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UploadImageComponent,\n  selectors: [[\"app-upload-image\"]],\n  decls: 8,\n  vars: 5,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"type\", \"file\", \"id\", \"fileInput\", \"formControlName\", \"fileInput\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"alert\", \"alert-danger\"]],\n  template: function UploadImageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function UploadImageComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelement(2, \"input\", 2);\n      i0.ɵɵtemplate(3, UploadImageComponent_div_3_Template, 2, 0, \"div\", 3);\n      i0.ɵɵtemplate(4, UploadImageComponent_div_4_Template, 2, 1, \"div\", 3);\n      i0.ɵɵtemplate(5, UploadImageComponent_div_5_Template, 2, 1, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 4);\n      i0.ɵɵtext(7, \"Upload\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.uploadForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.uploadForm.controls[\"fileInput\"].hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.uploadForm.controls[\"fileInput\"].hasError(\"fileSizeExceeded\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.uploadForm.controls[\"fileInput\"].hasError(\"invalidExtension\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.uploadForm.valid);\n    }\n  },\n  dependencies: [i3.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","UploadImageComponent","constructor","http","formBuilder","uploadForm","group","fileInput","required","fileSizeValidator","fileExtensionValidator","allowedExtensions","onSubmit","document","querySelector","console","log","files","file","formData","FormData","append","post","subscribe","result","reset","error","control","value","size","maxFileSize","fileName","name","fileExtension","split","pop","indexOf","toLowerCase","invalidExtension","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-image\\upload-image.component.ts","D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-image\\upload-image.component.html"],"sourcesContent":["\nimport { Component } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-upload-image',\n  templateUrl: './upload-image.component.html',\n  styleUrls: []\n})\nexport class UploadImageComponent {\n  readonly maxFileSize = 1; // MB\n  readonly allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n  uploadForm: FormGroup;\n\n  constructor(private http: HttpClient, private formBuilder: FormBuilder) {\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', [\n        Validators.required,\n        this.fileSizeValidator(),\n        this.fileExtensionValidator(this.allowedExtensions)\n      ]]\n    });\n  }\n\n  onSubmit() {\n    const fileInput = document.querySelector('#fileInput') as HTMLInputElement;\n    console.log(fileInput);\n    console.log(fileInput.files);\n    const file = fileInput?.files?.[0];\n    if(file){\n\n      const formData = new FormData();\n      formData.append('file',file );\n      this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData)\n        .subscribe((result: any) => {\n          console.log(result);\n          // Reset the form after successful upload\n          this.uploadForm.reset();\n        }, (error: any) => {\n          console.error(error);\n          // Display user-friendly error message here\n        });\n    }\n    else{\n      console.log('No Selected Files');\n    }\n  }\n\n  private fileSizeValidator(): ValidatorFn {\n    console.log(\"valid\");\n    return (control: AbstractControl): {[key: string] : boolean} | null => {\n      const file = control.value;\n      if ((file) && (file.size >240000000000 * 1024 * this.maxFileSize)) {\n        return { 'fileSizeExceeded': true };\n      }\n      return null;\n    };\n  }\n  \n  private fileExtensionValidator(allowedExtensions: string[]): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const file = control.value;\n      const fileName = file?.name;\n      const fileExtension = fileName?.split('.').pop();\n      if (fileExtension && allowedExtensions.indexOf('.' + fileExtension.toLowerCase()) === -1) {\n        return { invalidExtension: true };\n      }\n      return null;\n    };\n  } \n}","<form [formGroup]=\"uploadForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-group\">\n    <input type=\"file\" id=\"fileInput\" formControlName=\"fileInput\">\n\n    <div *ngIf=\"uploadForm.controls['fileInput'].hasError('required') \"\n    class=\"alert alert-danger\">Please select a file to upload.\n    </div>\n   <div *ngIf=\"uploadForm.controls['fileInput'].hasError('fileSizeExceeded') \"\n      class=\"alert alert-danger\">File size exceeds maximum limit of {{ maxFileSize }} MB.\n    </div>\n\n   <div *ngIf=\"uploadForm.controls['fileInput'].hasError('invalidExtension') \"\n      class=\"alert alert-danger\">Invalid file extension. Allowed extensions: {{ allowedExtensions.join(', ') }}.\n    </div>\n  </div>\n\n\n  <button type=\"submit\" [disabled]=\"!uploadForm.valid\" class=\"btn btn-primary\">Upload</button>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}