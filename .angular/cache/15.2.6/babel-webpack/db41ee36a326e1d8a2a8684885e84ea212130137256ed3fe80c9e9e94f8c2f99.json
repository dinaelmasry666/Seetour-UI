{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction UploadImageComponent_div_8_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"File is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UploadImageComponent_div_8_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"File exceeds maximum size limit of \", ctx_r3.maxFileSize, \" MB.\");\n  }\n}\nfunction UploadImageComponent_div_8_p_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"File has an unsupported extension. Supported extensions are: \", ctx_r4.allowedExtensions.join(\", \"), \".\");\n  }\n}\nfunction UploadImageComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, UploadImageComponent_div_8_p_1_Template, 2, 0, \"p\", 6);\n    i0.ɵɵtemplate(2, UploadImageComponent_div_8_p_2_Template, 2, 1, \"p\", 6);\n    i0.ɵɵtemplate(3, UploadImageComponent_div_8_p_3_Template, 2, 1, \"p\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.uploadForm.controls[\"fileInput\"].errors == null ? null : ctx_r0.uploadForm.controls[\"fileInput\"].errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.uploadForm.controls[\"fileInput\"].errors == null ? null : ctx_r0.uploadForm.controls[\"fileInput\"].errors[\"maxSize\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.uploadForm.controls[\"fileInput\"].errors == null ? null : ctx_r0.uploadForm.controls[\"fileInput\"].errors[\"invalidExtension\"]);\n  }\n}\nfunction UploadImageComponent_div_9_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Tour ID is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UploadImageComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, UploadImageComponent_div_9_p_1_Template, 2, 0, \"p\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.uploadForm.controls[\"tourid\"].errors == null ? null : ctx_r1.uploadForm.controls[\"tourid\"].errors[\"required\"]);\n  }\n}\nexport class UploadImageComponent {\n  constructor(http, formBuilder) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.maxFileSize = 1; // MB\n    this.allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', Validators.compose([Validators.required, this.fileSizeValidator.bind(this), this.fileExtensionValidator.bind(this)])],\n      tourid: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    const fileInput = document.querySelector('#fileInput');\n    const file = fileInput?.files?.[0];\n    if (file) {\n      const formData = new FormData();\n      formData.append('file', file);\n      this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData).subscribe(result => {\n        console.log(result);\n        // Reset the form after\n      }, error => {\n        console.error(error);\n      });\n    } else {\n      console.log('No valid files to upload.');\n    }\n  }\n}\nUploadImageComponent.ɵfac = function UploadImageComponent_Factory(t) {\n  return new (t || UploadImageComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nUploadImageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UploadImageComponent,\n  selectors: [[\"app-upload-image\"]],\n  decls: 10,\n  vars: 4,\n  consts: [[1, \"d-flex\", \"align-items-center\", 3, \"formGroup\", \"submit\"], [1, \"input-group\", \"mb-3\"], [\"for\", \"fileInput\", 1, \"input-group-text\"], [\"id\", \"fileInput\", \"type\", \"file\", \"name\", \"fileInput\", \"formControlName\", \"fileInput\", 1, \"form-control\"], [\"type\", \"number\", \"name\", \"tourid\", \"formControlName\", \"tourid\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"ml-1\", 3, \"disabled\"], [4, \"ngIf\"]],\n  template: function UploadImageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function UploadImageComponent_Template_form_submit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Select image:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 3)(5, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 5);\n      i0.ɵɵtext(7, \"Upload\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, UploadImageComponent_div_8_Template, 4, 3, \"div\", 6);\n      i0.ɵɵtemplate(9, UploadImageComponent_div_9_Template, 2, 1, \"div\", 6);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.uploadForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"disabled\", !ctx.uploadForm.valid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.uploadForm.controls[\"fileInput\"].invalid && ctx.uploadForm.controls[\"fileInput\"].touched);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.uploadForm.controls[\"tourid\"].invalid && ctx.uploadForm.controls[\"tourid\"].touched);\n    }\n  },\n  dependencies: [i3.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NumberValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;ICO/DC,yBAAiE;IAAAA,iCAAiB;IAAAA,iBAAI;;;;;IACtFA,yBAAgE;IAAAA,YAAwD;IAAAA,iBAAI;;;;IAA5DA,eAAwD;IAAxDA,wFAAwD;;;;;IACxHA,yBAAyE;IAAAA,YAAgG;IAAAA,iBAAI;;;;IAApGA,eAAgG;IAAhGA,gIAAgG;;;;;IAH3KA,2BAAkG;IAChGA,uEAAsF;IACtFA,uEAA4H;IAC5HA,uEAA6K;IAC/KA,iBAAM;;;;IAHAA,eAA2D;IAA3DA,iJAA2D;IAC3DA,eAA0D;IAA1DA,gJAA0D;IAC1DA,eAAmE;IAAnEA,yJAAmE;;;;;IAGvEA,yBAA8D;IAAAA,oCAAoB;IAAAA,iBAAI;;;;;IADxFA,2BAA4F;IAC1FA,uEAAsF;IACxFA,iBAAM;;;;IADAA,eAAwD;IAAxDA,2IAAwD;;;ADJhE,OAAM,MAAOC,oBAAoB;EAO/BC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,SAAI,GAAJD,IAAI;IAAsB,gBAAW,GAAXC,WAAW;IANzD,gBAAW,GAAW,CAAC,CAAC,CAAC;IACzB,sBAAiB,GAAa,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;IAMrE,IAAI,CAACC,UAAU,GAAG,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MACvCC,SAAS,EAAE,CAAC,EAAE,EAAER,UAAU,CAACS,OAAO,CAAC,CAACT,UAAU,CAACU,QAAQ,EAAE,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAACC,sBAAsB,CAACD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;MACrIE,MAAM,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACU,QAAQ;KACjC,CAAC;EACJ;EAEAK,QAAQ;IACN,MAAMP,SAAS,GAAGQ,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAqB;IAC1E,MAAMC,IAAI,GAAGV,SAAS,EAAEW,KAAK,GAAG,CAAC,CAAC;IAElC,IAAID,IAAI,EAAE;MACR,MAAME,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;MAC7B,IAAI,CAACd,IAAI,CAACmB,IAAI,CAAC,uDAAuD,EAAEH,QAAQ,CAAC,CAC9EI,SAAS,CAAEC,MAAW,IAAI;QACzBC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;QACnB;MACF,CAAC,EAAGG,KAAU,IAAI;QAChBF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;MACtB,CAAC,CAAC;KACL,MAAM;MACLF,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;;EAE5C;;AA/BWzB,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAA2B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCTjChC,+BAAuF;MAA/CA;QAAA,OAAUiC,cAAU;MAAA,EAAC;MAC3DjC,8BAA8B;MACoBA,6BAAa;MAAAA,iBAAQ;MACrEA,2BAAoG;MAEtGA,iBAAM;MACNA,iCAAkF;MAAAA,sBAAM;MAAAA,iBAAS;MACjGA,qEAIM;MACNA,qEAEM;MACRA,iBAAO;;;MAfuDA,0CAAwB;MAMjCA,eAA8B;MAA9BA,gDAA8B;MAC3EA,eAA0F;MAA1FA,mHAA0F;MAK1FA,eAAoF;MAApFA,6GAAoF","names":["Validators","i0","UploadImageComponent","constructor","http","formBuilder","uploadForm","group","fileInput","compose","required","fileSizeValidator","bind","fileExtensionValidator","tourid","onSubmit","document","querySelector","file","files","formData","FormData","append","post","subscribe","result","console","log","error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-image\\upload-image.component.ts","D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-image\\upload-image.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-upload-image',\n  templateUrl: './upload-image.component.html',\n  styleUrls: ['./upload-image.component.css']\n})\nexport class UploadImageComponent {\n  maxFileSize: number = 1; // MB\n  allowedExtensions: string[] = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n  uploadForm: FormGroup;\n  fileSizeValidator: any;\n  fileExtensionValidator: any;\n\n  constructor(private http: HttpClient, private formBuilder: FormBuilder) {\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', Validators.compose([Validators.required, this.fileSizeValidator.bind(this), this.fileExtensionValidator.bind(this)])],\n      tourid: ['', Validators.required]\n    });\n  }\n\n  onSubmit() {\n    const fileInput = document.querySelector('#fileInput') as HTMLInputElement;\n    const file = fileInput?.files?.[0];\n   \n    if (file) {\n      const formData = new FormData();\n      formData.append('file', file);\n      this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData)\n        .subscribe((result: any) => {\n          console.log(result);\n          // Reset the form after\n        }, (error: any) => {\n          console.error(error);\n        });\n    } else {\n      console.log('No valid files to upload.');\n    }\n  }\n}","<form class=\"d-flex align-items-center\" (submit)=\"onSubmit()\" [formGroup]=\"uploadForm\">\n  <div class=\"input-group mb-3\">\n    <label for=\"fileInput\" class=\"input-group-text\">Select image:</label>\n    <input class=\"form-control\" id=\"fileInput\" type=\"file\" name=\"fileInput\" formControlName=\"fileInput\">\n    <input class=\"form-control\" type=\"number\" name=\"tourid\" formControlName=\"tourid\">\n  </div>\n  <button type=\"submit\" class=\"btn btn-primary ml-1\" [disabled]=\"!uploadForm.valid\">Upload</button>\n  <div *ngIf=\"uploadForm.controls['fileInput'].invalid && uploadForm.controls['fileInput'].touched\">\n    <p *ngIf=\"uploadForm.controls['fileInput'].errors?.['required']\">File is required.</p>\n    <p *ngIf=\"uploadForm.controls['fileInput'].errors?.['maxSize']\">File exceeds maximum size limit of {{ maxFileSize }} MB.</p>\n    <p *ngIf=\"uploadForm.controls['fileInput'].errors?.['invalidExtension']\">File has an unsupported extension. Supported extensions are: {{ allowedExtensions.join(', ') }}.</p>\n  </div>\n  <div *ngIf=\"uploadForm.controls['tourid'].invalid && uploadForm.controls['tourid'].touched\">\n    <p *ngIf=\"uploadForm.controls['tourid'].errors?.['required']\">Tour ID is required.</p>\n  </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}