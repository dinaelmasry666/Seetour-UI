{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nexport class UploadImageComponent {\n  constructor(http, formBuilder) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.maxFileSize = 1; // MB\n    this.allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', [Validators.required]]\n    });\n  }\n  onSubmit() {\n    const formData = new FormData();\n    formData.append('file', this.uploadForm.controls['fileInput'].value);\n    console.log(this.uploadForm.controls['fileInput'].value);\n    console.log(this.uploadForm.value);\n    console.log(formData);\n    this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData).subscribe(result => {\n      console.log(result);\n      console.log(this.uploadForm.controls['fileInput'].value);\n      console.log(this.uploadForm.controls['fileInput'].value);\n      // Reset the form after successful upload\n      this.uploadForm.reset();\n    }, error => {\n      console.error(error);\n      console.log(this.uploadForm.controls['fileInput'].value);\n      // Display user-friendly error message here\n    });\n  }\n}\n\nUploadImageComponent.ɵfac = function UploadImageComponent_Factory(t) {\n  return new (t || UploadImageComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nUploadImageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UploadImageComponent,\n  selectors: [[\"app-upload-image\"]],\n  decls: 5,\n  vars: 2,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"type\", \"file\", \"id\", \"fileInput\", \"formControlName\", \"fileInput\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"]],\n  template: function UploadImageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function UploadImageComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelement(2, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 3);\n      i0.ɵɵtext(4, \"Upload\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.uploadForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", !ctx.uploadForm.valid);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAAiFA,UAAU,QAAQ,gBAAgB;;;;AAQnH,OAAM,MAAOC,oBAAoB;EAK/BC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,SAAI,GAAJD,IAAI;IAAsB,gBAAW,GAAXC,WAAW;IAJhD,gBAAW,GAAG,CAAC,CAAC,CAAC;IACjB,sBAAiB,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;IAIpE,IAAI,CAACC,UAAU,GAAG,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MACvCC,SAAS,EAAE,CAAC,EAAE,EAAE,CACdP,UAAU,CAACQ,QAAQ,CACpB;KACF,CAAC;EACJ;EAEAC,QAAQ;IACN,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACP,UAAU,CAACQ,QAAQ,CAAC,WAAW,CAAC,CAACC,KAAK,CAAC;IACpEC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,UAAU,CAACQ,QAAQ,CAAC,WAAW,CAAC,CAACC,KAAK,CAAC;IACxDC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,UAAU,CAACS,KAAK,CAAC;IAClCC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC;IACrB,IAAI,CAACP,IAAI,CAACc,IAAI,CAAC,uDAAuD,EAAEP,QAAQ,CAAC,CAC9EQ,SAAS,CAAEC,MAAW,IAAI;MACzBJ,OAAO,CAACC,GAAG,CAACG,MAAM,CAAC;MACvBJ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,UAAU,CAACQ,QAAQ,CAAC,WAAW,CAAC,CAACC,KAAK,CAAC;MACxDC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,UAAU,CAACQ,QAAQ,CAAC,WAAW,CAAC,CAACC,KAAK,CAAC;MAGpD;MACA,IAAI,CAACT,UAAU,CAACe,KAAK,EAAE;IACzB,CAAC,EAAGC,KAAU,IAAI;MAChBN,OAAO,CAACM,KAAK,CAACA,KAAK,CAAC;MACxBN,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,UAAU,CAACQ,QAAQ,CAAC,WAAW,CAAC,CAACC,KAAK,CAAC;MAEpD;IACF,CAAC,CAAC;EACN;;;AAlCWb,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAAqB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCTjCC,+BAAuD;MAAxBA;QAAA,OAAYC,cAAU;MAAA,EAAC;MACpDD,8BAAwB;MACtBA,2BAA8D;MAalEA,iBAAM;MAEJA,iCAA6E;MAAAA,sBAAM;MAAAA,iBAAS;;;MAjBxFA,0CAAwB;MAiBNA,eAA8B;MAA9BA,gDAA8B","names":["Validators","UploadImageComponent","constructor","http","formBuilder","uploadForm","group","fileInput","required","onSubmit","formData","FormData","append","controls","value","console","log","post","subscribe","result","reset","error","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-image\\upload-image.component.ts","D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-image\\upload-image.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-upload-image',\n  templateUrl: './upload-image.component.html',\n  styleUrls: []\n})\nexport class UploadImageComponent {\n  readonly maxFileSize = 1; // MB\n  readonly allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n  uploadForm: FormGroup;\n\n  constructor(private http: HttpClient, private formBuilder: FormBuilder) {\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', [\n        Validators.required\n      ]]\n    });\n  }\n\n  onSubmit() {\n    const formData = new FormData();\n    formData.append('file', this.uploadForm.controls['fileInput'].value);\n    console.log(this.uploadForm.controls['fileInput'].value);\n    console.log(this.uploadForm.value);\n    console.log(formData);\n    this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData)\n      .subscribe((result: any) => {\n        console.log(result);\n    console.log(this.uploadForm.controls['fileInput'].value);\n    console.log(this.uploadForm.controls['fileInput'].value);\n\n\n        // Reset the form after successful upload\n        this.uploadForm.reset();\n      }, (error: any) => {\n        console.error(error);\n    console.log(this.uploadForm.controls['fileInput'].value);\n\n        // Display user-friendly error message here\n      });\n  }\n\n  // private fileSizeValidator(): ValidatorFn {\n  //   console.log(\"valid\");\n  //   return (control: AbstractControl): {[key: string] : boolean} | null => {\n  //     const file = control.value;\n  //     if ((file) && (file.size >1024* 1024 * this.maxFileSize)) {\n  //       return { 'fileSizeExceeded': true };\n  //     }\n  //     return null;\n  //   };\n  // }\n  \n  // private fileExtensionValidator(allowedExtensions: string[]): ValidatorFn {\n  //   return (control: AbstractControl): ValidationErrors | null => {\n  //     const file = control.value;\n  //     const fileName = file?.name;\n  //     const fileExtension = fileName?.split('.').pop();\n  //     if (fileExtension && allowedExtensions.indexOf('.' + fileExtension.toLowerCase()) === -1) {\n  //       return { invalidExtension: true };\n  //     }\n  //     return null;\n  //   };\n  // } \n}\n\n\n\n\n\n\n","<form [formGroup]=\"uploadForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-group\">\n    <input type=\"file\" id=\"fileInput\" formControlName=\"fileInput\">\n\n    <!-- <div *ngIf=\"uploadForm.controls['fileInput'].hasError('required') \"\n    class=\"alert alert-danger\">Please select a file to upload.\n    </div> -->\n   <!-- <div *ngIf=\"uploadForm.controls['fileInput'].hasError('fileSizeExceeded') \"\n      class=\"alert alert-danger\">File size exceeds maximum limit of {{ maxFileSize }} MB.\n    </div>\n\n   <div *ngIf=\"uploadForm.controls['fileInput'].hasError('invalidExtension') \"\n      class=\"alert alert-danger\">Invalid file extension. Allowed extensions: {{ allowedExtensions.join(', ') }}.\n    </div>\n  </div> -->\n</div>\n\n  <button type=\"submit\" [disabled]=\"!uploadForm.valid\" class=\"btn btn-primary\">Upload</button>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}