{"ast":null,"code":"import { Validators } from '@angular/forms';\nconst fileInput = document.querySelector('#fileInput');\nconsole.log(fileInput);\nconsole.log(fileInput.files);\nconst file = fileInput?.files?.[0];\nexport class UploadImageComponent {\n  constructor(http, formBuilder) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.maxFileSize = 1; // MB\n    this.allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', [Validators.required, this.fileSizeValidator(), this.fileExtensionValidator(this.allowedExtensions)]]\n    });\n  }\n  onSubmit() {\n    if (file) {\n      const formData = new FormData();\n      formData.append('file', file);\n      this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData).subscribe(result => {\n        console.log(result);\n        // Reset the form after successful upload\n        this.uploadForm.reset();\n      }, error => {\n        console.error(error);\n        // Display user-friendly error message here\n      });\n    } else {\n      console.log('No Selected Files');\n    }\n  }\n  fileSizeValidator() {\n    console.log(\"valid\");\n    return control => {\n      const file = control.value;\n      if (file && file.size > 240000000000 * 1024 * this.maxFileSize) {\n        return {\n          'fileSizeExceeded': true\n        };\n      }\n      return null;\n    };\n  }\n  fileExtensionValidator(allowedExtensions) {\n    return control => {\n      const file = control.value;\n      const fileName = file?.name;\n      const fileExtension = fileName?.split('.').pop();\n      if (fileExtension && allowedExtensions.indexOf('.' + fileExtension.toLowerCase()) === -1) {\n        return {\n          invalidExtension: true\n        };\n      }\n      return null;\n    };\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAiFA,UAAU,QAAQ,gBAAgB;AAQnH,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAqB;AAC1EC,OAAO,CAACC,GAAG,CAACJ,SAAS,CAAC;AACtBG,OAAO,CAACC,GAAG,CAACJ,SAAS,CAACK,KAAK,CAAC;AAC5B,MAAMC,IAAI,GAAGN,SAAS,EAAEK,KAAK,GAAG,CAAC,CAAC;AAClC,OAAM,MAAOE,oBAAoB;EAK/BC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,SAAI,GAAJD,IAAI;IAAsB,gBAAW,GAAXC,WAAW;IAJhD,gBAAW,GAAG,CAAC,CAAC,CAAC;IACjB,sBAAiB,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;IAIpE,IAAI,CAACC,UAAU,GAAG,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MACvCZ,SAAS,EAAE,CAAC,EAAE,EAAE,CACdD,UAAU,CAACc,QAAQ,EACnB,IAAI,CAACC,iBAAiB,EAAE,EACxB,IAAI,CAACC,sBAAsB,CAAC,IAAI,CAACC,iBAAiB,CAAC,CACpD;KACF,CAAC;EACJ;EAEAC,QAAQ;IAEN,IAAGX,IAAI,EAAC;MAEN,MAAMY,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAACd,IAAI,CAAE;MAC7B,IAAI,CAACG,IAAI,CAACY,IAAI,CAAC,uDAAuD,EAAEH,QAAQ,CAAC,CAC9EI,SAAS,CAAEC,MAAW,IAAI;QACzBpB,OAAO,CAACC,GAAG,CAACmB,MAAM,CAAC;QACnB;QACA,IAAI,CAACZ,UAAU,CAACa,KAAK,EAAE;MACzB,CAAC,EAAGC,KAAU,IAAI;QAChBtB,OAAO,CAACsB,KAAK,CAACA,KAAK,CAAC;QACpB;MACF,CAAC,CAAC;KACL,MACG;MACFtB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;;EAEpC;EAEQU,iBAAiB;IACvBX,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpB,OAAQsB,OAAwB,IAAsC;MACpE,MAAMpB,IAAI,GAAGoB,OAAO,CAACC,KAAK;MAC1B,IAAKrB,IAAI,IAAMA,IAAI,CAACsB,IAAI,GAAE,YAAY,GAAG,IAAI,GAAG,IAAI,CAACC,WAAY,EAAE;QACjE,OAAO;UAAE,kBAAkB,EAAE;QAAI,CAAE;;MAErC,OAAO,IAAI;IACb,CAAC;EACH;EAEQd,sBAAsB,CAACC,iBAA2B;IACxD,OAAQU,OAAwB,IAA6B;MAC3D,MAAMpB,IAAI,GAAGoB,OAAO,CAACC,KAAK;MAC1B,MAAMG,QAAQ,GAAGxB,IAAI,EAAEyB,IAAI;MAC3B,MAAMC,aAAa,GAAGF,QAAQ,EAAEG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,EAAE;MAChD,IAAIF,aAAa,IAAIhB,iBAAiB,CAACmB,OAAO,CAAC,GAAG,GAAGH,aAAa,CAACI,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;QACxF,OAAO;UAAEC,gBAAgB,EAAE;QAAI,CAAE;;MAEnC,OAAO,IAAI;IACb,CAAC;EACH","names":["Validators","fileInput","document","querySelector","console","log","files","file","UploadImageComponent","constructor","http","formBuilder","uploadForm","group","required","fileSizeValidator","fileExtensionValidator","allowedExtensions","onSubmit","formData","FormData","append","post","subscribe","result","reset","error","control","value","size","maxFileSize","fileName","name","fileExtension","split","pop","indexOf","toLowerCase","invalidExtension"],"sourceRoot":"","sources":["D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-image\\upload-image.component.ts"],"sourcesContent":["\nimport { Component } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-upload-image',\n  templateUrl: './upload-image.component.html',\n  styleUrls: []\n})\nconst fileInput = document.querySelector('#fileInput') as HTMLInputElement;\nconsole.log(fileInput);\nconsole.log(fileInput.files);\nconst file = fileInput?.files?.[0];\nexport class UploadImageComponent {\n  readonly maxFileSize = 1; // MB\n  readonly allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n  uploadForm: FormGroup;\n\n  constructor(private http: HttpClient, private formBuilder: FormBuilder) {\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', [\n        Validators.required,\n        this.fileSizeValidator(),\n        this.fileExtensionValidator(this.allowedExtensions)\n      ]]\n    });\n  }\n\n  onSubmit() {\n\n    if(file){\n\n      const formData = new FormData();\n      formData.append('file',file );\n      this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData)\n        .subscribe((result: any) => {\n          console.log(result);\n          // Reset the form after successful upload\n          this.uploadForm.reset();\n        }, (error: any) => {\n          console.error(error);\n          // Display user-friendly error message here\n        });\n    }\n    else{\n      console.log('No Selected Files');\n    }\n  }\n\n  private fileSizeValidator(): ValidatorFn {\n    console.log(\"valid\");\n    return (control: AbstractControl): {[key: string] : boolean} | null => {\n      const file = control.value;\n      if ((file) && (file.size >240000000000 * 1024 * this.maxFileSize)) {\n        return { 'fileSizeExceeded': true };\n      }\n      return null;\n    };\n  }\n  \n  private fileExtensionValidator(allowedExtensions: string[]): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const file = control.value;\n      const fileName = file?.name;\n      const fileExtension = fileName?.split('.').pop();\n      if (fileExtension && allowedExtensions.indexOf('.' + fileExtension.toLowerCase()) === -1) {\n        return { invalidExtension: true };\n      }\n      return null;\n    };\n  } \n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}