{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction UploadImagesComponent_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"img\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const image_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", image_r2.url, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction UploadImagesComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, UploadImagesComponent_div_8_div_1_Template, 2, 1, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.uploadedUrls);\n  }\n}\nexport class UploadImagesComponent {\n  constructor(http) {\n    this.http = http;\n    this.selectedFiles = [];\n    this.uploadedUrls = [];\n    this.maxFileSize = 1; // MB\n    this.allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n  }\n  onSelect(event) {\n    this.selectedFiles = event.target.files;\n  }\n  onSubmit() {\n    const formData = new FormData();\n    for (const file of this.selectedFiles) {\n      if (this.checkFileSize(file) && this.checkIsImage(file)) {\n        formData.append('files', file, file.name);\n      } else {\n        console.log(`File ${file.name} is invalid and will not be uploaded.`);\n      }\n    }\n    if (formData.has('files')) {\n      this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImages', formData).subscribe(result => {\n        console.log(result);\n        this.uploadedUrls = result;\n        // Reset the form after successful upload\n        console.log(this.uploadedUrls[0].url);\n        this.selectedFiles = [];\n      }, error => {\n        console.error(error);\n      });\n    } else {\n      console.log('No valid files to upload.');\n    }\n  }\n  fileSizeValidator() {\n    return control => {\n      const file = control.value;\n      if (file && file.size > this.maxFileSize * 1024 * 1024) {\n        this.fileSizeExceeded = true;\n        return {\n          'fileSizeExceeded': true\n        };\n      }\n      this.fileSizeExceeded = false;\n      return null;\n    };\n  }\n  fileExtensionValidator(allowedExtensions) {\n    return control => {\n      const file = control.value;\n      const fileName = file?.name;\n      const fileExtension = fileName?.split('.').pop();\n      if (fileExtension && allowedExtensions.indexOf('.' + fileExtension.toLowerCase()) === -1) {\n        this.invalidExtension = true;\n        return {\n          invalidExtension: true\n        };\n      }\n      this.invalidExtension = false;\n      return null;\n    };\n  }\n  validateFile() {\n    const fileInput = document.querySelector('#fileInput');\n    const file = fileInput?.files?.[0];\n    if (file) {\n      const fileName = file.name;\n      const fileSize = file.size / 1024 / 1024; // Convert bytes to MB\n      const fileExtension = fileName.split('.').pop()?.toLowerCase();\n      if (fileSize > this.maxFileSize) {\n        this.fileSizeExceeded = true;\n      } else {\n        this.fileSizeExceeded = false;\n      }\n      if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension) === -1) {\n        this.invalidExtension = true;\n      } else {\n        this.invalidExtension = false;\n      }\n    } else {\n      this.fileSizeExceeded = false;\n      this.invalidExtension = false;\n    }\n  }\n}\nUploadImagesComponent.ɵfac = function UploadImagesComponent_Factory(t) {\n  return new (t || UploadImagesComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nUploadImagesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UploadImagesComponent,\n  selectors: [[\"app-upload-images\"]],\n  decls: 9,\n  vars: 1,\n  consts: [[3, \"submit\"], [1, \"form-group\"], [\"for\", \"formFileLg\", 1, \"form-label\"], [\"type\", \"file\", \"multiple\", \"\", 1, \"form-control\", \"form-control-lg\", 2, \"width\", \"700px\", 3, \"change\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [3, \"src\"]],\n  template: function UploadImagesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function UploadImagesComponent_Template_form_submit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Select images:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"input\", 3);\n      i0.ɵɵlistener(\"change\", function UploadImagesComponent_Template_input_change_4_listener($event) {\n        return ctx.onSelect($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 4);\n      i0.ɵɵtext(7, \"Upload Images\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(8, UploadImagesComponent_div_8_Template, 2, 1, \"div\", 5);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngIf\", ctx.uploadedUrls.length > 0);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","UploadImagesComponent","constructor","http","onSelect","event","selectedFiles","target","files","onSubmit","formData","FormData","file","checkFileSize","checkIsImage","append","name","console","log","has","post","subscribe","result","uploadedUrls","url","error","fileSizeValidator","control","value","size","maxFileSize","fileSizeExceeded","fileExtensionValidator","allowedExtensions","fileName","fileExtension","split","pop","indexOf","toLowerCase","invalidExtension","validateFile","fileInput","document","querySelector","fileSize","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-images\\upload-images.component.html","D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-images\\upload-images.component.ts"],"sourcesContent":["<form (submit)=\"onSubmit()\">\n    <div class=\"form-group\">\n      <label for=\"formFileLg\" class=\"form-label\">Select images:</label>\n      <input class=\"form-control form-control-lg\" style=\"width: 700px;\" type=\"file\" multiple (change)=\"onSelect($event)\">\n<br>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Upload Images</button>\n  </form>\n  \n  <div *ngIf=\"uploadedUrls.length > 0\" >\n    <div *ngFor=\"let image of uploadedUrls\">\n\n        <img  [src]=\"image.url\" />\n      </div>\n    </div>\n  ","import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-upload-images',\n  templateUrl: './upload-images.component.html',\n  styleUrls: ['./upload-images.component.css']\n})\nexport class UploadImagesComponent {\n  selectedFiles: File[] = [];\n  uploadedUrls: any[] = [];\n  maxFileSize: number = 1; // MB\n  allowedExtensions: string[] = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n\n  constructor(private http: HttpClient) {}\n\n  onSelect(event: any) {\n    this.selectedFiles = event.target.files;\n  }\n\n  onSubmit() {\n    const formData = new FormData();\n    for (const file of this.selectedFiles) {\n      if (this.checkFileSize(file) && this.checkIsImage(file)) {\n        formData.append('files', file, file.name);\n      } else {\n        console.log(`File ${file.name} is invalid and will not be uploaded.`);\n      }\n    }\n\n    if (formData.has('files')) {\n      this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImages', formData)\n        .subscribe((result: any) => {\n          console.log(result);\n          this.uploadedUrls = result;\n          // Reset the form after successful upload\n          console.log(this.uploadedUrls[0].url);\n          this.selectedFiles = [];\n        }, (error: any) => {\n          console.error(error);\n        });\n    } else {\n      console.log('No valid files to upload.');\n    }\n  }\n\n \n\n  private fileSizeValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: boolean } | null => {\n      const file = control.value;\n      if (file && file.size > this.maxFileSize * 1024 * 1024) {\n        this.fileSizeExceeded = true;\n        return { 'fileSizeExceeded': true };\n      }\n      this.fileSizeExceeded = false;\n      return null;\n    };\n  }\n\n  private fileExtensionValidator(allowedExtensions: string[]): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const file = control.value;\n      const fileName = file?.name;\n      const fileExtension = fileName?.split('.').pop();\n      if (fileExtension && allowedExtensions.indexOf('.' + fileExtension.toLowerCase()) === -1) {\n        this.invalidExtension = true;\n        return { invalidExtension: true };\n      }\n      this.invalidExtension = false;\n      return null;\n    }\n  }\n  validateFile() {\n    const fileInput = document.querySelector('#fileInput') as HTMLInputElement;\n    const file = fileInput?.files?.[0];\n    if (file) {\n      const fileName = file.name;\n      const fileSize = file.size / 1024 / 1024; // Convert bytes to MB\n      const fileExtension = fileName.split('.').pop()?.toLowerCase();\n\n      if (fileSize > this.maxFileSize) {\n        this.fileSizeExceeded = true;\n      } else {\n        this.fileSizeExceeded = false;\n      }\n\n      if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension) === -1) {\n        this.invalidExtension = true;\n      } else {\n        this.invalidExtension = false;\n      }\n    } else {\n      this.fileSizeExceeded = false;\n      this.invalidExtension = false;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}