{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction UploadImageComponent_div_7_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"File is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UploadImageComponent_div_7_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"File exceeds maximum size limit of \", ctx_r2.maxFileSize, \" MB.\");\n  }\n}\nfunction UploadImageComponent_div_7_p_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"File has an unsupported extension. Supported extensions are: \", ctx_r3.allowedExtensions.join(\", \"), \".\");\n  }\n}\nfunction UploadImageComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, UploadImageComponent_div_7_p_1_Template, 2, 0, \"p\", 5);\n    i0.ɵɵtemplate(2, UploadImageComponent_div_7_p_2_Template, 2, 1, \"p\", 5);\n    i0.ɵɵtemplate(3, UploadImageComponent_div_7_p_3_Template, 2, 1, \"p\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.uploadForm.controls[\"fileInput\"].errors == null ? null : ctx_r0.uploadForm.controls[\"fileInput\"].errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.uploadForm.controls[\"fileInput\"].errors == null ? null : ctx_r0.uploadForm.controls[\"fileInput\"].errors[\"fileSizeValidator\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.uploadForm.controls[\"fileInput\"].errors == null ? null : ctx_r0.uploadForm.controls[\"fileInput\"].errors[\"invalidExtension\"]);\n  }\n}\nexport class UploadImageComponent {\n  constructor(http, formBuilder) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.maxFileSize = 1; // MB\n    this.allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', Validators.compose([Validators.required, this.fileSizeValidator.bind(this), this.fileExtensionValidator.bind(this)])]\n    });\n  }\n  onSubmit() {\n    const formData = new FormData();\n    formData.append('file', this.uploadForm.get('fileInput')?.value);\n    this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData).subscribe(result => {\n      console.log(result);\n      // Reset the form after successful upload\n      this.uploadForm.reset();\n    }, error => {\n      console.error(error);\n    });\n  }\n  fileSizeValidator(control) {\n    const file = control.value;\n    if (file && file.size > 1024 * 1024 * this.maxFileSize) {\n      return {\n        fileSizeExceeded: true\n      };\n    }\n    return null;\n  }\n  fileExtensionValidator(control) {\n    const file = control.value;\n    const fileName = file?.name;\n    const fileExtension = fileName?.split('.').pop();\n    if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension.toLowerCase()) === -1) {\n      return {\n        invalidExtension: true\n      };\n    }\n    return null;\n  }\n}\nUploadImageComponent.ɵfac = function UploadImageComponent_Factory(t) {\n  return new (t || UploadImageComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nUploadImageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UploadImageComponent,\n  selectors: [[\"app-upload-image\"]],\n  decls: 8,\n  vars: 2,\n  consts: [[1, \"d-flex\", \"align-items-center\", 3, \"formGroup\", \"submit\"], [1, \"input-group\", \"mb-3\"], [\"for\", \"fileInput\", 1, \"input-group-text\"], [\"id\", \"fileInput\", \"type\", \"file\", \"name\", \"fileInput\", \"formControlName\", \"fileInput\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"ml-1\"], [4, \"ngIf\"]],\n  template: function UploadImageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function UploadImageComponent_Template_form_submit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Select image:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 4);\n      i0.ɵɵtext(6, \"Upload\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(7, UploadImageComponent_div_7_Template, 4, 3, \"div\", 5);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.uploadForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.uploadForm.controls[\"fileInput\"].invalid && ctx.uploadForm.controls[\"fileInput\"].touched);\n    }\n  },\n  dependencies: [i3.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","UploadImageComponent","constructor","http","formBuilder","uploadForm","group","fileInput","compose","required","fileSizeValidator","bind","fileExtensionValidator","onSubmit","formData","FormData","append","get","value","post","subscribe","result","console","log","reset","error","control","file","size","maxFileSize","fileSizeExceeded","fileName","name","fileExtension","split","pop","allowedExtensions","indexOf","toLowerCase","invalidExtension","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-image\\upload-image.component.ts","D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-image\\upload-image.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-upload-image',\n  templateUrl: './upload-image.component.html',\n  styleUrls: ['./upload-image.component.css']\n})\nexport class UploadImageComponent {\n  maxFileSize: number = 1; // MB\n  allowedExtensions: string[] = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n  uploadForm: FormGroup;\n\n  constructor(private http: HttpClient, private formBuilder: FormBuilder) {\n    this.uploadForm = this.formBuilder.group({\n      fileInput: ['', Validators.compose([Validators.required, this.fileSizeValidator.bind(this), this.fileExtensionValidator.bind(this)])]\n\n    });\n  }\n\n  onSubmit() {\n    const formData = new FormData();\n    formData.append('file', this.uploadForm.get('fileInput')?.value);\n    this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData)\n      .subscribe((result: any) => {\n        console.log(result);\n        // Reset the form after successful upload\n        this.uploadForm.reset();\n      }, (error: any) => {\n        console.error(error);\n      });\n  }\n\n  private fileSizeValidator(control: any) {\n    const file = control.value;\n    if (file && file.size > 1024 * 1024 * this.maxFileSize) {\n      return { fileSizeExceeded: true };\n    }\n    return null;\n  }\n\n  private fileExtensionValidator(control: any) {\n    const file = control.value;\n    const fileName = file?.name;\n    const fileExtension = fileName?.split('.').pop();\n    if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension.toLowerCase()) === -1) {\n      return {\n        invalidExtension: true\n      };\n    }\n    return null;\n  }\n  \n}\n","<form class=\"d-flex align-items-center\" (submit)=\"onSubmit()\" [formGroup]=\"uploadForm\">\n  <div class=\"input-group mb-3\">\n    <label for=\"fileInput\" class=\"input-group-text\">Select image:</label>\n    <input class=\"form-control\" id=\"fileInput\" type=\"file\" name=\"fileInput\" formControlName=\"fileInput\">\n    <!-- <input class=\"form-control\" type=\"number\" name=\"tourid\" formControlName=\"tourid\"> -->\n  </div>\n  <button type=\"submit\" class=\"btn btn-primary ml-1\">Upload</button>\n  <div *ngIf=\"uploadForm.controls['fileInput'].invalid && uploadForm.controls['fileInput'].touched\">\n    <p *ngIf=\"uploadForm.controls['fileInput'].errors?.['required']\">File is required.</p>\n    <p *ngIf=\"uploadForm.controls['fileInput'].errors?.['fileSizeValidator']\">File exceeds maximum size limit of {{ maxFileSize }} MB.</p>\n    <p *ngIf=\"uploadForm.controls['fileInput'].errors?.['invalidExtension']\">File has an unsupported extension. Supported extensions are: {{ allowedExtensions.join(', ') }}.</p>\n  </div>\n  <!-- <div *ngIf=\"uploadForm.controls['tourid'].invalid && uploadForm.controls['tourid'].touched\">\n    <p *ngIf=\"uploadForm.controls['tourid'].errors?.['required']\">Tour ID is required.</p>\n  </div> -->\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}