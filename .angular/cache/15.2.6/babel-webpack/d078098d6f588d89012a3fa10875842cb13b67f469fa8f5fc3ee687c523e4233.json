{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction UploadImageComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" File size exceeds maximum limit of \", ctx_r0.maxFileSize, \" MB. \");\n  }\n}\nfunction UploadImageComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Invalid file extension. Allowed extensions: \", ctx_r1.allowedExtensions.join(\", \"), \". \");\n  }\n}\nexport class UploadImageComponent {\n  constructor(http, formBuilder) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.ffileInput = document.querySelector('#fileInput');\n    this.file = this.ffileInput?.files?.[0];\n    this.maxFileSize = 1; // MB\n    this.allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n    this.fileSizeExceeded = false;\n    this.invalidExtension = false;\n    this.uploadForm = this.formBuilder.group({\n      ffileInput: ['', [Validators.required, this.fileSizeValidator(), this.fileExtensionValidator(this.allowedExtensions)]]\n    });\n  }\n  onSubmit() {\n    if (this.file) {\n      const formData = new FormData();\n      formData.append('file', this.file);\n      this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData).subscribe(result => {\n        console.log(this.uploadForm.controls['fileInput'].errors?.['fileSizeExceeded']);\n        console.log(result);\n        // Reset the form after successful upload\n        this.uploadForm.reset();\n      }, error => {\n        console.error(error);\n        // Display user-friendly error message here\n      });\n    } else {\n      console.log('No Selected Files');\n    }\n  }\n  fileSizeValidator() {\n    return control => {\n      const file = control.value;\n      if (file && file.size > this.maxFileSize * 1024 * 1024) {\n        this.fileSizeExceeded = true;\n        return {\n          'fileSizeExceeded': true\n        };\n      }\n      this.fileSizeExceeded = false;\n      return null;\n    };\n  }\n  fileExtensionValidator(allowedExtensions) {\n    return control => {\n      const file = control.value;\n      const fileName = file?.name;\n      const fileExtension = fileName?.split('.').pop();\n      if (fileExtension && allowedExtensions.indexOf('.' + fileExtension.toLowerCase()) === -1) {\n        this.invalidExtension = true;\n        return {\n          invalidExtension: true\n        };\n      }\n      this.invalidExtension = false;\n      return null;\n    };\n  }\n  validateFile() {\n    if (this.file) {\n      const fileName = this.file.name;\n      const fileSize = this.file.size / 1024 / 1024; // Convert bytes to MB\n      const fileExtension = fileName.split('.').pop()?.toLowerCase();\n      if (fileSize > this.maxFileSize) {\n        this.fileSizeExceeded = true;\n      } else {\n        this.fileSizeExceeded = false;\n      }\n      if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension) === -1) {\n        this.invalidExtension = true;\n      } else {\n        this.invalidExtension = false;\n      }\n    } else {\n      this.fileSizeExceeded = false;\n      this.invalidExtension = false;\n    }\n  }\n}\nUploadImageComponent.ɵfac = function UploadImageComponent_Factory(t) {\n  return new (t || UploadImageComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nUploadImageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UploadImageComponent,\n  selectors: [[\"app-upload-image\"]],\n  decls: 7,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"type\", \"file\", \"id\", \"fileInput\", \"formControlName\", \"fileInput\", 3, \"change\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"alert\", \"alert-danger\"]],\n  template: function UploadImageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function UploadImageComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"input\", 2);\n      i0.ɵɵlistener(\"change\", function UploadImageComponent_Template_input_change_2_listener() {\n        return ctx.validateFile();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, UploadImageComponent_div_3_Template, 2, 1, \"div\", 3);\n      i0.ɵɵtemplate(4, UploadImageComponent_div_4_Template, 2, 1, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 4);\n      i0.ɵɵtext(6, \"Upload\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.uploadForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.uploadForm.controls[\"ffileInput\"].errors == null ? null : ctx.uploadForm.controls[\"ffileInput\"].errors[\"fileSizeExceeded\"]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.uploadForm.controls[\"ffileInput\"].errors == null ? null : ctx.uploadForm.controls[\"ffileInput\"].errors[\"invalidExtension\"]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.uploadForm.valid || ctx.fileSizeExceeded || ctx.invalidExtension);\n    }\n  },\n  dependencies: [i3.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAAiFA,UAAU,QAAQ,gBAAgB;;;;;;;ICG/GC,8BAAuG;IACrGA,YACF;IAAAA,iBAAM;;;;IADJA,eACF;IADEA,0FACF;;;;;IAEAA,8BAAuG;IACrGA,YACF;IAAAA,iBAAM;;;;IADJA,eACF;IADEA,iHACF;;;ADDJ,OAAM,MAAOC,oBAAoB;EAS/BC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,SAAI,GAAJD,IAAI;IAAsB,gBAAW,GAAXC,WAAW;IARxD,eAAU,GAAGC,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAqB;IACrE,SAAI,GAAG,IAAI,CAACC,UAAU,EAAEC,KAAK,GAAG,CAAC,CAAC;IAC1B,gBAAW,GAAG,CAAC,CAAC,CAAC;IACjB,sBAAiB,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;IAEtE,qBAAgB,GAAG,KAAK;IACxB,qBAAgB,GAAG,KAAK;IAGtB,IAAI,CAACC,UAAU,GAAG,IAAI,CAACL,WAAW,CAACM,KAAK,CAAC;MACvCH,UAAU,EAAE,CAAC,EAAE,EAAE,CACfR,UAAU,CAACY,QAAQ,EACnB,IAAI,CAACC,iBAAiB,EAAE,EACxB,IAAI,CAACC,sBAAsB,CAAC,IAAI,CAACC,iBAAiB,CAAC,CACpD;KACF,CAAC;EACJ;EAEAC,QAAQ;IAEN,IAAI,IAAI,CAACC,IAAI,EAAE;MACb,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACH,IAAI,CAAC;MAClC,IAAI,CAACb,IAAI,CAACiB,IAAI,CAAC,uDAAuD,EAAEH,QAAQ,CAAC,CAC9EI,SAAS,CAAEC,MAAW,IAAI;QACzBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACf,UAAU,CAACgB,QAAQ,CAAC,WAAW,CAAC,CAACC,MAAM,GAAG,kBAAkB,CAAC,CAAC;QAC/EH,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;QACnB;QACA,IAAI,CAACb,UAAU,CAACkB,KAAK,EAAE;MACzB,CAAC,EAAGC,KAAU,IAAI;QAChBL,OAAO,CAACK,KAAK,CAACA,KAAK,CAAC;QACpB;MACF,CAAC,CAAC;KACL,MAAM;MACLL,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;;EAEpC;EAEQZ,iBAAiB;IACvB,OAAQiB,OAAwB,IAAuC;MACrE,MAAMb,IAAI,GAAGa,OAAO,CAACC,KAAK;MAC1B,IAAId,IAAI,IAAIA,IAAI,CAACe,IAAI,GAAG,IAAI,CAACC,WAAW,GAAG,IAAI,GAAG,IAAI,EAAE;QACtD,IAAI,CAACC,gBAAgB,GAAG,IAAI;QAC5B,OAAO;UAAE,kBAAkB,EAAE;QAAI,CAAE;;MAErC,IAAI,CAACA,gBAAgB,GAAG,KAAK;MAC7B,OAAO,IAAI;IACb,CAAC;EACH;EAEQpB,sBAAsB,CAACC,iBAA2B;IACxD,OAAQe,OAAwB,IAA6B;MAC3D,MAAMb,IAAI,GAAGa,OAAO,CAACC,KAAK;MAC1B,MAAMI,QAAQ,GAAGlB,IAAI,EAAEmB,IAAI;MAC3B,MAAMC,aAAa,GAAGF,QAAQ,EAAEG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,EAAE;MAChD,IAAIF,aAAa,IAAItB,iBAAiB,CAACyB,OAAO,CAAC,GAAG,GAAGH,aAAa,CAACI,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;QACxF,IAAI,CAACC,gBAAgB,GAAG,IAAI;QAC5B,OAAO;UAAEA,gBAAgB,EAAE;QAAI,CAAE;;MAEnC,IAAI,CAACA,gBAAgB,GAAG,KAAK;MAC7B,OAAO,IAAI;IACb,CAAC;EACH;EAEAC,YAAY;IAEV,IAAI,IAAI,CAAC1B,IAAI,EAAE;MACb,MAAMkB,QAAQ,GAAG,IAAI,CAAClB,IAAI,CAACmB,IAAI;MAC/B,MAAMQ,QAAQ,GAAG,IAAI,CAAC3B,IAAI,CAACe,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;MAC/C,MAAMK,aAAa,GAAGF,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,EAAE,EAAEE,WAAW,EAAE;MAE9D,IAAIG,QAAQ,GAAG,IAAI,CAACX,WAAW,EAAE;QAC/B,IAAI,CAACC,gBAAgB,GAAG,IAAI;OAC7B,MAAM;QACL,IAAI,CAACA,gBAAgB,GAAG,KAAK;;MAG/B,IAAIG,aAAa,IAAI,IAAI,CAACtB,iBAAiB,CAACyB,OAAO,CAAC,GAAG,GAAGH,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE;QAC/E,IAAI,CAACK,gBAAgB,GAAG,IAAI;OAC7B,MAAM;QACL,IAAI,CAACA,gBAAgB,GAAG,KAAK;;KAEhC,MAAM;MACL,IAAI,CAACR,gBAAgB,GAAG,KAAK;MAC7B,IAAI,CAACQ,gBAAgB,GAAG,KAAK;;EAEjC;;AAvFWxC,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAA2C;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCTjChD,+BAAuD;MAAxBA;QAAA,OAAYiD,cAAU;MAAA,EAAC;MACpDjD,8BAAwB;MACwCA;QAAA,OAAUiD,kBAAc;MAAA,EAAC;MAAvFjD,iBAAwF;MAExFA,qEAEM;MAENA,qEAEM;MACRA,iBAAM;MAENA,iCAAqH;MAAAA,sBAAM;MAAAA,iBAAS;;;MAbhIA,0CAAwB;MAIpBA,eAAoE;MAApEA,qJAAoE;MAIpEA,eAAoE;MAApEA,qJAAoE;MAKtDA,eAAsE;MAAtEA,gGAAsE","names":["Validators","i0","UploadImageComponent","constructor","http","formBuilder","document","querySelector","ffileInput","files","uploadForm","group","required","fileSizeValidator","fileExtensionValidator","allowedExtensions","onSubmit","file","formData","FormData","append","post","subscribe","result","console","log","controls","errors","reset","error","control","value","size","maxFileSize","fileSizeExceeded","fileName","name","fileExtension","split","pop","indexOf","toLowerCase","invalidExtension","validateFile","fileSize","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-image\\upload-image.component.ts","D:\\ITI_Tasks\\MEAN\\Angular\\Day5\\SeetourUI\\src\\app\\component\\upload-image\\upload-image.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-upload-image',\n  templateUrl: './upload-image.component.html',\n  styleUrls: []\n})\nexport class UploadImageComponent {\n   ffileInput = document.querySelector('#fileInput') as HTMLInputElement;\n   file = this.ffileInput?.files?.[0];\n  readonly maxFileSize = 1; // MB\n  readonly allowedExtensions = [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\"];\n  uploadForm: FormGroup;\n  fileSizeExceeded = false;\n  invalidExtension = false;\n\n  constructor(private http: HttpClient, private formBuilder: FormBuilder) {\n    this.uploadForm = this.formBuilder.group({\n      ffileInput: ['', [\n        Validators.required,\n        this.fileSizeValidator(),\n        this.fileExtensionValidator(this.allowedExtensions)\n      ]]\n    });\n  }\n\n  onSubmit() {\n  \n    if (this.file) {\n      const formData = new FormData();\n      formData.append('file', this.file);\n      this.http.post('https://localhost:7277/api/AzureImagesURL/UploadImage', formData)\n        .subscribe((result: any) => {\n          console.log(this.uploadForm.controls['fileInput'].errors?.['fileSizeExceeded']);\n          console.log(result);\n          // Reset the form after successful upload\n          this.uploadForm.reset();\n        }, (error: any) => {\n          console.error(error);\n          // Display user-friendly error message here\n        });\n    } else {\n      console.log('No Selected Files');\n    }\n  }\n\n  private fileSizeValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: boolean } | null => {\n      const file = control.value;\n      if (file && file.size > this.maxFileSize * 1024 * 1024) {\n        this.fileSizeExceeded = true;\n        return { 'fileSizeExceeded': true };\n      }\n      this.fileSizeExceeded = false;\n      return null;\n    };\n  }\n\n  private fileExtensionValidator(allowedExtensions: string[]): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const file = control.value;\n      const fileName = file?.name;\n      const fileExtension = fileName?.split('.').pop();\n      if (fileExtension && allowedExtensions.indexOf('.' + fileExtension.toLowerCase()) === -1) {\n        this.invalidExtension = true;\n        return { invalidExtension: true };\n      }\n      this.invalidExtension = false;\n      return null;\n    }\n  }\n\n  validateFile() {\n  \n    if (this.file) {\n      const fileName = this.file.name;\n      const fileSize = this.file.size / 1024 / 1024; // Convert bytes to MB\n      const fileExtension = fileName.split('.').pop()?.toLowerCase();\n\n      if (fileSize > this.maxFileSize) {\n        this.fileSizeExceeded = true;\n      } else {\n        this.fileSizeExceeded = false;\n      }\n\n      if (fileExtension && this.allowedExtensions.indexOf('.' + fileExtension) === -1) {\n        this.invalidExtension = true;\n      } else {\n        this.invalidExtension = false;\n      }\n    } else {\n      this.fileSizeExceeded = false;\n      this.invalidExtension = false;\n    }\n  }\n}\n","<form [formGroup]=\"uploadForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-group\">\n    <input type=\"file\" id=\"fileInput\" formControlName=\"fileInput\" (change)=\"validateFile()\">\n    \n    <div *ngIf=\"uploadForm.controls['ffileInput'].errors?.['fileSizeExceeded']\" class=\"alert alert-danger\">\n      File size exceeds maximum limit of {{ maxFileSize }} MB.\n    </div>\n    \n    <div *ngIf=\"uploadForm.controls['ffileInput'].errors?.['invalidExtension']\" class=\"alert alert-danger\">\n      Invalid file extension. Allowed extensions: {{ allowedExtensions.join(', ') }}.\n    </div>\n  </div>\n  \n  <button type=\"submit\" [disabled]=\"!uploadForm.valid || fileSizeExceeded || invalidExtension\" class=\"btn btn-primary\">Upload</button>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}